"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require('path');
const env_1 = require("@things-factory/env");
const graphql_tools_1 = require("graphql-tools");
const graphql_upload_1 = require("graphql-upload");
const appRootPath = require('app-root-path').path;
const selfModulePackage = require(path.resolve(appRootPath, 'package.json'));
const selfModuleName = selfModulePackage.name;
const selfModule = selfModulePackage['things-factory'] && require(path.resolve(appRootPath, selfModulePackage.main));
const schemas = env_1.orderedModuleNames
    .map(dep => {
    try {
        if (selfModuleName == dep) {
            /* self module entities */
            return selfModule && selfModule.schema;
        }
        else {
            return require(dep).schema;
        }
    }
    catch (e) {
        env_1.logger.error(e);
    }
})
    .filter(schema => schema)
    .reduce((sum, schema) => {
    var _a;
    const { typeDefs, resolvers } = sum;
    let { typeDefs: sTypeDefs, resolvers: sResolvers } = schema;
    const newResolvers = Object.assign(Object.assign({ mutations: [], subscriptions: [], directives: [] }, sResolvers), { queries: [], subqueryResolvers: [] });
    (_a = sResolvers === null || sResolvers === void 0 ? void 0 : sResolvers.queries) === null || _a === void 0 ? void 0 : _a.forEach(q => {
        const queryEntries = Object.entries(q);
        queryEntries.forEach(entry => {
            const key = entry[0];
            const val = entry[1];
            if (typeof val == 'object' && val instanceof Object && !Array.isArray(val)) {
                newResolvers.subqueryResolvers.push({ [key]: val });
            }
            else {
                newResolvers.queries.push({ [key]: val });
            }
        });
    });
    return {
        typeDefs: {
            types: [...typeDefs.types, ...((sTypeDefs === null || sTypeDefs === void 0 ? void 0 : sTypeDefs.types) || [])],
            queries: [...typeDefs.queries, ...((sTypeDefs === null || sTypeDefs === void 0 ? void 0 : sTypeDefs.queries) || [])],
            mutations: [...typeDefs.mutations, ...((sTypeDefs === null || sTypeDefs === void 0 ? void 0 : sTypeDefs.mutations) || [])],
            subscriptions: [...typeDefs.subscriptions, ...((sTypeDefs === null || sTypeDefs === void 0 ? void 0 : sTypeDefs.subscriptions) || [])],
            directives: [...typeDefs.directives, ...((sTypeDefs === null || sTypeDefs === void 0 ? void 0 : sTypeDefs.directives) || [])]
        },
        resolvers: {
            queries: [...resolvers.queries, ...newResolvers.queries],
            mutations: [...resolvers.mutations, ...newResolvers.mutations],
            subscriptions: [...resolvers.subscriptions, ...newResolvers.subscriptions],
            directives: [...resolvers.directives, ...newResolvers.directives],
            subqueryResolvers: [...resolvers.subqueryResolvers, ...newResolvers.subqueryResolvers]
        }
    };
}, {
    typeDefs: {
        types: [],
        queries: [],
        mutations: [],
        subscriptions: [],
        directives: []
    },
    resolvers: {
        queries: [],
        mutations: [],
        subscriptions: [],
        directives: [],
        subqueryResolvers: []
    }
});
env_1.logger.info('schemas %s', JSON.stringify(schemas, null, 2));
const queryTypes = ['type Query {', ...schemas.typeDefs.queries, '}'].join('\n');
const mutationTypes = ['type Mutation {', ...schemas.typeDefs.mutations, '}'].join('\n');
const subscriptionTypes = ['type Subscription {', ...schemas.typeDefs.subscriptions, '}'].join('\n');
const directiveTypes = [...schemas.typeDefs.directives].join('\n');
const typeDefs = [
    /* GraphQL */ `
    schema {
      query: Query
      mutation: Mutation
      subscription: Subscription
    }
  `,
    queryTypes,
    mutationTypes,
    subscriptionTypes,
    directiveTypes,
    /* GraphQL */ `
    scalar Upload
  `,
    ...schemas.typeDefs.types
];
var queryResolvers = schemas.resolvers.queries.reduce((sum, query) => {
    return Object.assign(Object.assign({}, sum), query);
}, {});
var mutationResolvers = schemas.resolvers.mutations.reduce((sum, mutation) => {
    return Object.assign(Object.assign({}, sum), mutation);
}, {});
var subscriptionResolvers = schemas.resolvers.subscriptions.reduce((sum, subscription) => {
    return Object.assign(Object.assign({}, sum), subscription);
}, {});
var directiveResolvers = schemas.resolvers.directives.reduce((sum, directive) => {
    return Object.assign(Object.assign({}, sum), directive);
}, {});
var subqueryResolvers = schemas.resolvers.subqueryResolvers.reduce((sum, subResolver) => {
    return Object.assign(Object.assign({}, sum), subResolver);
}, {});
exports.schema = graphql_tools_1.makeExecutableSchema({
    typeDefs,
    resolvers: Object.assign({ Query: queryResolvers, Mutation: mutationResolvers, Subscription: subscriptionResolvers, Upload: graphql_upload_1.GraphQLUpload }, subqueryResolvers),
    directiveResolvers
});
//# sourceMappingURL=schema.js.map