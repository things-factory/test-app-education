"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const middleware_1 = require("graphql-voyager/middleware");
const koa_bodyparser_1 = __importDefault(require("koa-bodyparser"));
const koa_router_1 = __importDefault(require("koa-router"));
const notifications_1 = require("./controllers/notifications");
const send = require('koa-send');
var crawler = require('npm-license-crawler');
const bodyParserOption = {
    formLimit: '10mb',
    jsonLimit: '10mb',
    textLimit: '10mb'
};
exports.routes = new koa_router_1.default();
// for providing resource
exports.routes.get('/file/:file', async (context, next) => {
    await send(context, context.params.file, { root: process.env.UPLOAD_DIR });
});
exports.routes.get('/dependencies', async (context, next) => {
    const dependencyGraph = require('@things-factory/env/lib/dependency-graph');
    await context.render('dependencies-view-graphviz', { model: dependencyGraph });
});
exports.routes.get('/graphql-voyager', middleware_1.koa({
    endpointUrl: '/graphiql'
}));
exports.routes.get('/licenses', (context, next) => {
    return new Promise(function (resolve, reject) {
        var options = {
            start: ['.'],
            exclude: ['./node_modules/@things-factory'],
            // json: 'licenses.json',
            noColor: true,
            production: true,
            unknown: false
        };
        crawler.dumpLicenses(options, function (error, res) {
            if (error) {
                console.error('Error:', error);
                reject(error);
            }
            else {
                context.type = 'application/json';
                context.body = res;
                resolve();
            }
        });
    });
});
exports.routes.all('*', async (context, next) => {
    notifications_1.sendNotificationToAll();
    return next();
});
exports.routes.get('/vapidPublicKey', async (context, next) => {
    context.body = notifications_1.getVapidPublicKey();
});
exports.routes.post('/register', koa_bodyparser_1.default(bodyParserOption), async (context, next) => {
    await notifications_1.register({
        request: context.request
    });
    context.status = 201;
});
exports.routes.post('/unregister', async (context, next) => {
    await notifications_1.unregister(context.request);
    context.status = 201;
});
exports.routes.post('/request-notification', koa_bodyparser_1.default(bodyParserOption), async (context, next) => {
    var { receivers = [], message, url, title } = context.request.body;
    var msg = Object.assign(Object.assign({}, context.request.body), { title, body: message, url: url || context.request.href });
    receivers.forEach(receiver => {
        notifications_1.sendNotification({
            receiver,
            message: JSON.stringify(msg)
        });
    });
    context.body = {
        success: true
    };
});
//# sourceMappingURL=routes.js.map